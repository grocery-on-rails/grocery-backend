// NOTE: we agreed to use snake case :p


// ** categories vs subcategories issue **
// let's deal with "category" as an abstract concept
// a category is a collection of subcategories
// every product should have a property subcategory: List<subcategory>
//               but not a category property
// clicking on subcategory => redirects you to searching with no restriction filtered with the subcategory
// the only place where we would need category:
//      category page to display the subcategories
 
productSummary
    {
        "id": ..., 
        "name": ...,
        "price": number,
        "image": ImageURL
    },

product
    {
        "id": ..., 
        "name": ...,
        "price": {
            "$numberDouble": number
        },
        "image_list": List<ImageURL>,
        "subcategory": List<category>,
        "description": a paragraph,

        //! backend side edit required here
        // rest of properties should be inside the following object
        // to put them all in a table
        others: {
            "unit": ...,
            "..." : ...
        }
        "stock": {
        "$numberDouble": "0.0"
        }
    },

GET $URL/home:
    {
        slides: List<ImageURL>,
        content: [
            {
                title: sectionTitle,
                content: List<productSummary>
            },
            ...
        ]
    }

GET $URL/cat:
    [
        {
            title: sectionTitle,
            content: [
                {
                    title: sectionTitle,
                    image: subsectionImageURL
                }
            ]
        }
    ]

GET $URL/product/ID:
    product

POST $URL/auth/signup: Returns the id of user in db
    {
        "email": "grocery-on-rails@gmail.com",
        "password": "grocery-on-rails",
        // optional arguments below
        "username": "cswpy",
        "privilege": true // Default false, do not specify it for normal users
    }

POST $URL/auth/login: Returns the JWT token for access, save it for future requests, the token identifies an unique user, use it whenever user information is involved
    {
        "email": ...,
        "password": ...
    }

APIs for Admin, send below requests with a bearer token that belongs to a admin user with privilege

POST $URL/home: Create new product
    Follow product specification exactly
    Name, Price, Description are required

DELETE $URL/home: Delete a product
    {
        "id": ...
    }



[!1]. not the full functionalities for now only search by keyword (not filter, or sort)
[!2]. no need to implement the show subcategory, as it can be displayed using the search
$URL/search/keyword:
    List<productSummary>
